apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
apply plugin: 'war'

war {
    archiveName 'ROOT.war'
}

task('copy_LiteMol_js', type:Copy) {
    // Copy LiteMol plugin (the core).
    from('../LiteMol/build/web/assets/js/') {
        include 'LiteMol-plugin.js'
    }
    // Copy PrankWeb app.
    from ('../LiteMol/build/examples/PrankWeb') {
        include 'LiteMol-example.js'
        rename 'LiteMol-example.js', 'LiteMol-PrankWeb.js'
    }
    into 'src/main/webapp/javascripts'
}
tasks['copy_LiteMol_js'].dependsOn ':LiteMol:gulp_Example-PrankWeb'

task('copy_LiteMol_css', type:Copy) {
    // Copy LiteMol CSS stylesheets.
    from('../LiteMol/build/web/assets/css/') {
        include 'LiteMol-plugin-light.css'
        rename 'LiteMol-plugin-light.css', 'LiteMol-plugin.css'
    }
    into 'src/main/webapp/css'
}
tasks['copy_LiteMol_css'].dependsOn ':LiteMol:gulp_Example-PrankWeb'

task('copy_p2rank_jar', type:Copy) {
    // Copy P2Rank jar file
    from('../p2rank/build/bin/') {
        include 'p2rank.jar'
        rename 'p2rank.jar', 'p2rank_slim.jar'
    }
    into 'libs'
}
tasks['copy_p2rank_jar'].dependsOn ':p2rank:assemble'

compileJava.dependsOn 'copy_p2rank_jar'
processResources.dependsOn 'copy_LiteMol_css'
processResources.dependsOn 'copy_LiteMol_js'

task('deploy', dependsOn: 'war', type:Exec) {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', "call ${System.env.JBOSS_HOME}\\bin\\jboss-cli.bat --connect controller=localhost \"deploy --force build\\libs\\ROOT.war\""
    } else {
        commandLine "./deploy.sh"
    }
    inputs.file "build/libs/ROOT.war"
    outputs.upToDateWhen {true} // Since there is no output.
}

dependencies {
    compile project(':pranklib')

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

    compile group: 'org.biojava', name: 'biojava-core', version: '4.2.6'
    compile 'org.biojava:biojava-structure:4.2.6'
    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.1'
    compile 'commons-beanutils:commons-beanutils:1.9.3'
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'
    compile group: 'javax', name: 'javaee-api', version: '7.0'

    // Pranklib dependencies
    compile group: 'com.univocity', name: 'univocity-parsers', version: '2.4.0' // For parsing csv
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.13' // bz2 decompress

    //Prank dependencies begin
    compile 'org.codehaus.groovy:groovy-all:2.4.9'
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile "org.apache.commons:commons-lang3:3.5"
    compile "commons-io:commons-io:2.5"
    compile "com.google.guava:guava:21.0"
    compile 'org.zeroturnaround:zt-zip:1.11'

    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'

    compile 'org.biojava:biojava-alignment:4.2.6'

    compile 'org.openscience.cdk:cdk-qsarmolecular:1.5.13'    // for NumericalSurface class
    compile 'org.openscience.cdk:cdk-data:1.5.13'             // for Atom class
    compile 'nz.ac.waikato.cms.weka:weka-dev:3.9.0'
    //compile files('libs/biojava-structure-4.2.6-rdk1.jar')     // customized fork for pocket-rank
    compile fileTree(dir: 'libs', include: '*.jar')
    // Prank dependencies end
    
}
